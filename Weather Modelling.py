# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SzGXZ1Oqbj469wJR4daw9CAItRApPMxE
"""

import numpy as np
import matplotlib.pyplot as plt

def calculate_temperature(humidity):
    # Coefficients of the quadratic equation for temperature based on humidity
    a = 0.002
    b = 0.1
    c = 20.0

    # Quadratic equation: T(h) = ah^2 + bh + c
    temperature = a * humidity**2 + b * humidity + c

    return temperature

# Generate humidity values from 0 to 100 with a step of 1
humidities = np.arange(0, 101, 1)

# Calculate temperatures for each humidity value
temperatures = [calculate_temperature(humidity) for humidity in humidities]

# Plotting
plt.plot(humidities, temperatures, label='Predicted Temperature', color='green')
plt.title('Temperature vs. Humidity')
plt.xlabel('Humidity')
plt.ylabel('Temperature')
plt.legend()

plt.show()

print()
def calculate_temperature_from_pressure(pressure):
    # Example linear relationship: T(p) = 0.02p + 10.0
    slope = 0.02
    intercept = 10.0

    temperature = slope * pressure + intercept
    return temperature

# Generate pressure values from 900 to 1100 with a step of 1
pressures = np.arange(900, 1101, 1)

# Calculate temperatures for each pressure value
temperatures = [calculate_temperature_from_pressure(p) for p in pressures]

# Plotting
plt.plot(pressures, temperatures, label='Predicted Temperature', color='blue')
plt.title('Temperature vs. Pressure')
plt.xlabel('Pressure')
plt.ylabel('Temperature')
plt.legend()
plt.grid(True)
plt.show()

def calculate_temperature(humidity):
    # Coefficients of the quadratic equation for temperature based on humidity
    a = 0.002
    b = 0.1
    c = 20.0

    # Quadratic equation: T(h) = ah^2 + bh + c
    temperature = a * humidity**2 + b * humidity + c
    return temperature

# Hard-coded humidity value
humidity_value = 50

# Calculate temperature for the hard-coded humidity
result_temperature = calculate_temperature(humidity_value)

print(f'Temperature for Humidity {humidity_value}%: {result_temperature}°C')

def calculate_temperature(pressure):
    # Coefficients of the quadratic equation for temperature based on humidity
    slope = 0.02
    intercept = 10.0

    # Quadratic equation: T(h) = ah^2 + bh + c
    temperature = slope * pressure + intercept
    return temperature

# Hard-coded humidity value
pressure_value = 900

# Calculate temperature for the hard-coded humidity
result_temperature = calculate_temperature(pressure_value)

print(f'Temperature for pressure {pressure_value}%: {result_temperature}°C')